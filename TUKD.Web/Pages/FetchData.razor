@page "/fetchdata"
@using System.ComponentModel.DataAnnotations
@using System.Net.Mime
@inject HttpClient _http
@inject ILoadingService _loadingService
@inject IDialogService _dialogService
@inject IJSRuntime _js
@inject ISnackbar _snackbar
<style>
    .mud-toolbar.mud-toolbar-gutters.mud-table-toolbar {
        display: contents;
    }
</style>


<PageTitle>Daftar Rekanan</PageTitle>


<MudText Typo="Typo.h3"
         Class="my-6">
    Daftar Rekanan
</MudText>

<MudTable Items="_forecasts"
          Breakpoint="Breakpoint.Sm"
          MultiSelection="true"
          @bind-SelectedItems="_selectedItems"
          FixedHeader="true">

    <ToolBarContent>
        <MudGrid Class="pa-3">
            <MudItem xs="12"
                     sm="12"
                     md="6">
                <MudInput @bind-Value="_searchString"
                          Placeholder="Search..."
                          asd
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Adornment="Adornment.Start"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12"
                     sm="12"
                     md="6">
                <div class="d-flex justify-md-end justify-sm-start">
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Transparent"
                               StartIcon="@Icons.Material.Outlined.FilterAlt"
                               Class="mr-1"
                               Size="Size.Large">
                        Filter
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Error"
                               Class="mx-1"
                               StartIcon="@Icons.Material.Filled.Delete"
                               Disabled="!_selectedItems.Any()"
                               @onclick="Delete"
                               Size="Size.Large">
                        Delete
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Material.Filled.Add"
                               Class="mx-1"
                               OnClick="OnAdd"
                               Size="Size.Large">
                        Add
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Date</MudTh>
        <MudTh>Temp. (C)</MudTh>
        <MudTh>Temp. (F)</MudTh>
        <MudTh>Summary</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Date">@context.Date</MudTd>
        <MudTd DataLabel="Temperature (C)">@context.TemperatureC</MudTd>
        <MudTd DataLabel="Temperature (F)">@context.TemperatureF</MudTd>
        <MudTd DataLabel="Summary">@context.Summary</MudTd>
        <MudTd DataLabel="Actions">
            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                <MudMenuItem OnClick="() => OnEdit(context)">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Update"
                                 Color="Color.Info"
                                 Class="mx-1" />
                        <MudText Color="Color.Info"
                                 Class="mx-1">
                            Edit
                        </MudText>
                    </div>
                </MudMenuItem>
                <MudMenuItem OnClick="() => OnDelete(context)">
                    <div class="d-flex align-center">
                        <MudIcon Icon="@Icons.Material.Filled.Delete"
                                 Color="Color.Error"
                                 Class="mx-1" />
                        <MudText Color="Color.Error"
                                 Class="mx-1">
                            Delete
                        </MudText>
                    </div>
                </MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<WeatherForecast>? _forecasts;
    private string _searchString = string.Empty;
    private HashSet<WeatherForecast> _selectedItems = new();

    protected override async Task OnInitializedAsync()
    {
        _forecasts = await _http.GetFromJsonAsync<List<WeatherForecast>>("sample-data/weather.json");
        _loadingService.SetLoading();
        await Task.Delay(2000);
        _loadingService.StopLoading();
    }

    public class WeatherForecast
    {
        [Required]
        public DateTime? Date { get; set; } = DateTime.UtcNow;

        public int TemperatureC { get; set; }

        [Required]
        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }

    private async Task Delete()
    {
        var result = await ShowDeleteConfirmation();
        if (!result.Cancelled)
        {
            await _js.InvokeVoidAsync("console.log", _selectedItems);
            _loadingService.SetLoading();
            await Task.Delay(2000);
            foreach (var weatherForecast in _selectedItems)
            {
                _forecasts?.Remove(weatherForecast);
            }
            _snackbar.Add("Data has been deleted successfully", Severity.Success);
        }
        _loadingService.StopLoading();
        _selectedItems.Clear();
    }

    private async Task<DialogResult> ShowDeleteConfirmation()
    {
        var dialogParameters = new DialogParameters { ["ContentText"] = "Are you sure want to delete?" };
        var dialog = _dialogService.Show<ConfirmationDialog>("Delete Confirmation", dialogParameters, new DialogOptions { FullWidth = true, MaxWidth = MaxWidth.ExtraSmall });
        return await dialog.Result;
    }

    private async Task<DialogResult> ShowFormDialog(string title, WeatherForecast? context = null)
    {
        var dialogParameters = new DialogParameters{["Model"] = context};
        var dialogOptions = new DialogOptions
        {
            FullWidth = true,
            MaxWidth = MaxWidth.Small,
            DisableBackdropClick = true,
            CloseButton = true
        };
        var dialog = _dialogService.Show<FetchDataForm>(title, dialogParameters, dialogOptions);
        return await dialog.Result;
    }

    private async Task OnAdd()
    {
        var result = await ShowFormDialog("Add Data");
        if (!result.Cancelled)
        {
            _forecasts?.Add((WeatherForecast)result.Data);
            _snackbar.Add("Data has been added successfully", Severity.Success);
        }
    }

    private async Task OnEdit(WeatherForecast context)
    {
        var result = await ShowFormDialog("Edit Data", context);
        if (!result.Cancelled)
        {
            _loadingService.SetLoading();
            await Task.Delay(2000);
            var updatedIndex = _forecasts!.IndexOf(context);
            _forecasts![updatedIndex] = (WeatherForecast)result.Data;
            _loadingService.StopLoading();
            _snackbar.Add("Data has been updated successfully", Severity.Success);
        }
    }

    private async Task OnDelete(WeatherForecast context)
    {
        var result = await ShowDeleteConfirmation();
        if (!result.Cancelled)
        {
            _loadingService.SetLoading();
            await Task.Delay(2000);
            _forecasts?.Remove(context);
            _loadingService.StopLoading();
            _snackbar.Add("Data has been deleted successfully", Severity.Success);
        }
    }
}